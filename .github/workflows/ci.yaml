name: ci

on:
  push:
    branches:
      - main
      - feat/*
      - fix/*
      - experiment/*
  pull_request:

permissions: {}

env:
  XDG_DATA_HOME: ${{ github.workspace }}/.local/share
  flake: github:${{ github.repository }}/${{ github.sha }}
  nix-conf: |-
    accept-flake-config = true
    always-allow-substitutes = true
    builders-use-substitutes = true
    max-jobs = auto

jobs:
  flake-check:
    runs-on: ubuntu-latest
    steps:
      - uses: DeterminateSystems/nix-installer-action@v12
        with:
          extra-conf: ${{ env.nix-conf }}
      - uses: DeterminateSystems/magic-nix-cache-action@v7
      - name: nix-flake-check
        run: nix flake check '${{ env.flake }}' --show-trace
  flake-show:
    runs-on: ubuntu-latest
    steps:
      - uses: DeterminateSystems/nix-installer-action@v12
        with:
          extra-conf: ${{ env.nix-conf }}
      - uses: DeterminateSystems/magic-nix-cache-action@v7
      - name: nix-flake-show
        run: nix flake show '${{ env.flake }}'
  get-attrs:
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.get-attrs.outputs.build }}
      eval: ${{ steps.get-attrs.outputs.eval }}
    steps:
      - uses: DeterminateSystems/nix-installer-action@v12
        with:
          extra-conf: ${{ env.nix-conf }}
      - uses: DeterminateSystems/magic-nix-cache-action@v7
      - id: install-jq
        run: nix profile install '${{ env.flake }}#jq'
      - id: get-attrs
        run: |
          function summary() {
            printf '%s\n' "${*}" >> "$GITHUB_STEP_SUMMARY"
          }

          summary "# CI"
          TMP="$(mktemp -d)"
          # platform packages
          # XXX Removing build for aarch64 linux for now until I can get self-hosted setup
          nix flake show --json --all-systems '${{ env.flake }}' | jq '
            .packages
            | to_entries
            | map({
              name: "platformBuild-\(.key)",
              platform: .key,
              evalOnly: false,
              attr: "packages.\(.key).default"
            })
            | map(
              if .platform  == "x86_64-linux" then .runsOn="ubuntu-latest"
              elif .platform == "aarch64-darwin" then .runsOn="macos-latest"
              else .evalOnly=true | .runsOn="ubuntu-latest"
              end
            )
          ' > "$TMP/platformAttrs.json"

          # dev shells
          jq -c '
            unique_by(.platform)
            | sort_by(.runsOn)
            | map(
                .attr = "devShells.\(.platform).default.inputDerivation"
                | .name = "devShell-\(.platform)"
              )
          ' "$TMP/platformAttrs.json" >"$TMP/shellAttrs.json"

          # join shell and platform attrs
          jq -c -s add "$TMP/platformAttrs.json" "$TMP/shellAttrs.json" >"$TMP/attrs.json"

          # warn about eval-only attrs
          read -r -a evalOnlyAttrs < \
            <(jq -c -r 'map(select(.evalOnly) | .name) | @sh' "$TMP/attrs.json" | tr -d \')
          if [[ "${#evalOnlyAttrs[@]}" -ne 0 ]]; then
            printf -v attrs "\`%s\`, " "${evalOnlyAttrs[@]}"
            summary \
              "- ⚠️ The following attributes will only be evaluated: ${attrs%, }"
          fi

          # add all to-build attrs to the summary
          read -r -a buildAttrs < \
            <(jq -c -r 'map(select(.evalOnly | not) | .name) | @sh' "$TMP/attrs.json" | tr -d \')
          if [[ "${#buildAttrs[@]}" -ne 0 ]]; then
            printf -v attrs "\`%s\`, " "${buildAttrs[@]}"
            summary \
              "- ✅ The following attributes will be built: ${attrs%, }"
          fi

          # check for dupes
          duplicate_count="$(jq -r '
            group_by([.name, .attr]) | map(select(length>1)) | length
            ' "$TMP/attrs.json")"
          if [[ "$duplicate_count" -ne 0 ]]; then
            summary \
              "- ‼️ Duplicate entries in \`attrs.json\`: \`$(cat "$TMP/attrs.json")\`"
            exit 1
          fi

          # split build and evalOnly attrs
          jq -c 'map(select(.evalOnly))' <"$TMP/attrs.json" >"$TMP/eval.json"
          jq -c 'map(select(.evalOnly | not))' <"$TMP/attrs.json" >"$TMP/build.json"

          echo "build=$(<"$TMP/build.json")" >>"$GITHUB_OUTPUT"
          echo "eval=$(<"$TMP/eval.json")" >>"$GITHUB_OUTPUT"
  eval:
    name: eval ${{ matrix.attrs.name }}
    runs-on: ${{ matrix.attrs.runsOn }}
    needs: [ get-attrs ]
    strategy:
      fail-fast: false
      matrix:
        attrs: ${{ fromJson(needs.get-attrs.outputs.eval) }}
    env:
      system: ${{ matrix.attrs.platform }}
    steps:
      - uses: DeterminateSystems/nix-installer-action@v12
        with:
          extra-conf: ${{ env.nix-conf }}
      - uses: DeterminateSystems/magic-nix-cache-action@v7
      - name: eval
        if: ${{ matrix.attrs.evalOnly }}
        run: |
          nix eval --raw '${{ env.flake }}#${{ matrix.attrs.attr }}'
  build:
    name: build ${{ matrix.attrs.name }}
    runs-on: ${{ matrix.attrs.runsOn }}
    needs: [ get-attrs ]
    strategy:
      fail-fast: false
      matrix:
        attrs: ${{ fromJson(needs.get-attrs.outputs.build) }}
    env:
      system: ${{ matrix.attrs.platform }}
    steps:
      - uses: DeterminateSystems/nix-installer-action@v12
        with:
          extra-conf: ${{ env.nix-conf }}
      - uses: DeterminateSystems/magic-nix-cache-action@v7
      - name: nix-fast-build
        if: ${{ env.system != 'aarch64-darwin' }}
        run: |
          declare -a args=(
            '--no-nom'
            '--skip-cached'
            '--systems=${{ env.system }}'
            '--option' 'accept-flake-config' 'true'
            '--retries=3'
          )

          args+=('--flake=${{ env.flake }}#${{ matrix.attrs.attr }}')
          nix run '${{ env.flake }}#nix-fast-build' -- "${args[@]}"
      - name: nix-build
        if: ${{ env.system == 'aarch64-darwin' }}
        run: |
          nix build --keep-going '${{ env.flake }}#${{ matrix.attrs.attr }}'

  check:
    runs-on: ubuntu-latest
    needs: [ flake-check, flake-show, build, eval ]
    if: always()
    steps:
      - uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
          allowed-skips: eval
